diff -urN gcc-2.95.3/gcc/config/s390/s390.c gcc-2.95.3-s390/gcc/config/s390/s390.c
--- gcc-2.95.3/gcc/config/s390/s390.c	Fri Apr 19 14:57:59 2002
+++ gcc-2.95.3-s390/gcc/config/s390/s390.c	Wed Apr 17 12:24:59 2002
@@ -821,6 +821,14 @@
       if (REGNO (addr.base) == BASE_REGISTER
           || REGNO (addr.base) == STACK_POINTER_REGNUM)
         return TRUE;
+
+      /* Before reload, use of the frame pointer register
+	 also implies address.  After reload, this is so
+	 only if the frame pointer was not eliminated.  */
+      if (!(reload_completed || reload_in_progress)
+	  || frame_pointer_needed)
+	if (REGNO (addr.base) == FRAME_POINTER_REGNUM)
+	  return TRUE;
     }
 
   if (addr.indx && GET_CODE (addr.indx) == REG)
@@ -828,6 +836,14 @@
       if (REGNO (addr.indx) == BASE_REGISTER
           || REGNO (addr.indx) == STACK_POINTER_REGNUM)
         return TRUE;
+
+      /* Before reload, use of the frame pointer register
+	 also implies address.  After reload, this is so
+	 only if the frame pointer was not eliminated.  */
+      if (!(reload_completed || reload_in_progress)
+	  || frame_pointer_needed)
+	if (REGNO (addr.indx) == FRAME_POINTER_REGNUM)
+	  return TRUE;
     }
 
   return FALSE;
@@ -1030,6 +1046,7 @@
                         {
                           int even = INTVAL (op1) - 1;
                           op0 = gen_rtx_PLUS (Pmode, op0, GEN_INT (even));
+			  op0 = gen_rtx_CONST (Pmode, op0);
                           op1 = GEN_INT (1);
                         }
 
diff -urN gcc-2.95.3/gcc/config/s390/s390.md gcc-2.95.3-s390/gcc/config/s390/s390.md
--- gcc-2.95.3/gcc/config/s390/s390.md	Fri Apr 19 14:57:59 2002
+++ gcc-2.95.3-s390/gcc/config/s390/s390.md	Fri Apr 19 14:55:26 2002
@@ -1361,7 +1361,7 @@
       operands[1] = change_address (operands[1], VOIDmode, addr1);
       operands[2] = GEN_INT (INTVAL (operands[2]) - 1);
 
-      emit_insn (gen_movstrsico (operands[0], operands[1], operands[2]));
+      emit_insn (gen_movstrdi_short (operands[0], operands[1], operands[2]));
       DONE;
     } 
   else 
@@ -1378,33 +1378,42 @@
 
           /* Load up the address+length pairs.  */
 
-          emit_move_insn (gen_rtx_SUBREG (DImode, reg0, 0), addr0);
-          emit_move_insn (gen_rtx_SUBREG (DImode, reg0, 1), len);
+          emit_move_insn (gen_highpart (DImode, reg0), addr0);
+          emit_move_insn (gen_lowpart (DImode, reg0), len);
 
-          emit_move_insn (gen_rtx_SUBREG (DImode, reg1, 0), addr1);
-          emit_move_insn (gen_rtx_SUBREG (DImode, reg1, 1), len);
+          emit_move_insn (gen_highpart (DImode, reg1), addr1);
+          emit_move_insn (gen_lowpart (DImode, reg1), len);
 
           /* MOVE */
-          emit_insn (gen_movstrdi_64 (reg0, reg1));
+          emit_insn (gen_movstrdi_64 (reg0, reg1, reg0, reg1));
           DONE;
         }
       else
 	{
-          rtx label = gen_label_rtx ();
-          rtx reg0, reg1, len;
+          rtx label1 = gen_label_rtx ();
+          rtx label2 = gen_label_rtx ();
+          rtx reg0, reg1, len, blocks;
       		
           reg0 = gen_reg_rtx (DImode);
           reg1 = gen_reg_rtx (DImode);
           len = gen_reg_rtx (DImode);
+          blocks = gen_reg_rtx (DImode);
 
           emit_move_insn (len, operands[2]);	
           emit_insn (gen_cmpdi (len, const0_rtx));
-          emit_jump_insn (gen_beq (label));
+          emit_jump_insn (gen_beq (label1));
           emit_move_insn (reg0, addr0);
           emit_move_insn (reg1, addr1);
           emit_insn (gen_adddi3 (len, len, constm1_rtx));
-          emit_insn (gen_movstrdix_64 (reg0, reg1, len));
-          emit_label (label); 
+          emit_insn (gen_ashrdi3 (blocks, len, GEN_INT (8)));
+          emit_insn (gen_cmpdi (blocks, const0_rtx));
+          emit_jump_insn (gen_beq (label2));
+          emit_insn (gen_movstrdi_long (reg0, reg1, reg0, reg1, blocks, blocks));
+          emit_label (label2); 
+	  operands[0] = change_address (operands[0], VOIDmode, reg0);
+	  operands[1] = change_address (operands[1], VOIDmode, reg1);
+          emit_insn (gen_movstrdi_short (operands[0], operands[1], len));
+          emit_label (label1); 
           DONE;	   
        }	 
     }
@@ -1419,7 +1428,7 @@
          (match_operand:BLK 1 "general_operand" ""))
     (use (match_operand:SI 2 "general_operand" ""))
     (match_operand 3 "" "")]
-    ""
+    "!TARGET_64BIT"
     "
 {
   rtx addr0 = force_operand (XEXP (operands[0], 0), NULL_RTX);
@@ -1431,14 +1440,11 @@
       operands[1] = change_address (operands[1], VOIDmode, addr1);
       operands[2] = GEN_INT (INTVAL (operands[2]) - 1);
 
-      emit_insn (gen_movstrsico (operands[0], operands[1], operands[2]));
+      emit_insn (gen_movstrsi_short (operands[0], operands[1], operands[2]));
       DONE;
     } 
   else 
     {
-      if (TARGET_64BIT)
-	FAIL;
-
       if (TARGET_MVCLE) 
 	{
           /* implementation suggested by  Richard Henderson <rth@cygnus.com> */
@@ -1452,149 +1458,187 @@
 
           /* Load up the address+length pairs.  */
 
-          emit_move_insn (gen_rtx_SUBREG (SImode, reg0, 0), addr0);
-          emit_move_insn (gen_rtx_SUBREG (SImode, reg0, 1), len);
+          emit_move_insn (gen_highpart (SImode, reg0), addr0);
+          emit_move_insn (gen_lowpart (SImode, reg0), len);
 
-          emit_move_insn (gen_rtx_SUBREG (SImode, reg1, 0), addr1);
-          emit_move_insn (gen_rtx_SUBREG (SImode, reg1, 1), len);
+          emit_move_insn (gen_highpart (SImode, reg1), addr1);
+          emit_move_insn (gen_lowpart (SImode, reg1), len);
 
           /* MOVE */
-          emit_insn (gen_movstrsi_31 (reg0, reg1));
+          emit_insn (gen_movstrsi_31 (reg0, reg1, reg0, reg1));
           DONE;
         }
       else
 	{
-          rtx label = gen_label_rtx ();
-          rtx reg0, reg1, len; 
+          rtx label1 = gen_label_rtx ();
+          rtx label2 = gen_label_rtx ();
+          rtx reg0, reg1, len, blocks;
       		
           reg0 = gen_reg_rtx (SImode);
           reg1 = gen_reg_rtx (SImode);
 	  len = gen_reg_rtx (SImode); 
+	  blocks = gen_reg_rtx (SImode); 
 	  
 	  emit_move_insn (len, operands[2]);
           emit_insn (gen_cmpsi (len, const0_rtx));
-          emit_jump_insn (gen_beq (label));
+          emit_jump_insn (gen_beq (label1));
           emit_move_insn (reg0, addr0);
           emit_move_insn (reg1, addr1);
           emit_insn (gen_addsi3 (len, len, constm1_rtx));
-          emit_insn (gen_movstrsix_31 (reg0, reg1, len));
-          emit_label (label); 
+          emit_insn (gen_ashrsi3 (blocks, len, GEN_INT (8)));
+          emit_insn (gen_cmpsi (blocks, const0_rtx));
+          emit_jump_insn (gen_beq (label2));
+          emit_insn (gen_movstrsi_long (reg0, reg1, reg0, reg1, blocks, blocks));
+          emit_label (label2); 
+	  operands[0] = change_address (operands[0], VOIDmode, reg0);
+	  operands[1] = change_address (operands[1], VOIDmode, reg1);
+          emit_insn (gen_movstrsi_short (operands[0], operands[1], len));
+          emit_label (label1); 
           DONE;	   
        }	 
     }
 }")
 
-; Move a block that is less than 256 bytes in length.
+; Move a block that is up to 256 bytes in length.
+; The block length is taken as (operands[2] % 256) + 1.
 
-(define_insn "movstrsico"
-  [(set (match_operand:BLK 0 "s_operand" "=oQ")
-        (match_operand:BLK 1 "s_operand" "oQ"))
-   (use (match_operand 2 "const_int_operand" "I"))]
-  "((unsigned) INTVAL (operands[2]) < 256)"
-  "mvc\\t%O0(%c2+1,%R0),%1"
-  [(set_attr "op_type" "SS")
-   (set_attr "atype" "mem")])
+(define_insn "movstrdi_short"
+  [(set (match_operand:BLK 0 "s_operand" "=oQ,oQ")
+        (match_operand:BLK 1 "s_operand" "oQ,oQ"))
+   (use (match_operand:DI 2 "nonmemory_operand" "n,a"))
+   (clobber (match_scratch:DI 3 "=X,&a"))]
+  "TARGET_64BIT"
+  "*
+{
+  switch (which_alternative)
+    {
+      case 0:
+	return \"mvc\\t%O0(%b2+1,%R0),%1\";
 
-; Move a block that is more than 256 bytes in lenght or length in register
+      case 1:
+	output_asm_insn (\"bras\\t%3,.+10\", operands);
+	output_asm_insn (\"mvc\\t%O0(1,%R0),%1\", operands);
+	return \"ex\\t%2,0(%3)\";
 
-(define_insn "movstrdix_64"
-  [(set (mem:BLK (match_operand:DI 0 "register_operand" "a"))
-        (mem:BLK (match_operand:DI 1 "register_operand" "a")))
-   (use (match_operand:DI 2 "register_operand" "a"))
-   (clobber (match_dup 0))
-   (clobber (match_dup 1))
-   (clobber (match_scratch:DI 3 "=&a"))
-   (clobber (reg:CC 33))]
-  ""
+      default:
+        abort ();
+    }
+}"
+  [(set_attr "op_type" "SS,NN")
+   (set_attr "atype"   "mem,mem")
+   (set_attr "length"  "*,14")])
+
+(define_insn "movstrsi_short"
+  [(set (match_operand:BLK 0 "s_operand" "=oQ,oQ")
+        (match_operand:BLK 1 "s_operand" "oQ,oQ"))
+   (use (match_operand:SI 2 "nonmemory_operand" "n,a"))
+   (clobber (match_scratch:SI 3 "=X,&a"))]
+  "!TARGET_64BIT"
   "*
 {
-  rtx xop[4];
-  xop[0] = gen_label_rtx ();
-  xop[1] = gen_label_rtx ();
-  xop[2] = gen_label_rtx ();
-  xop[3] = operands[3];
-  output_asm_insn (\"srag\\t%3,%2,8\",operands);
-  output_asm_insn (\"jz\\t%l1\",xop);
-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",
-			     CODE_LABEL_NUMBER (xop[0]));
-  output_asm_insn (\"mvc\\t0(256,%0),0(%1)\",operands);
-  output_asm_insn (\"la\\t%0,256(%0)\",operands);
-  output_asm_insn (\"la\\t%1,256(%1)\",operands);
-  xop[3] = operands[3];
-  output_asm_insn (\"brct\\t%3,%l0\",xop);
-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",
-			     CODE_LABEL_NUMBER (xop[1]));
-  xop[3] = operands[3];
-  output_asm_insn (\"bras\\t%3,%l2\",xop);
-  output_asm_insn (\"mvc\\t0(1,%0),0(%1)\",operands);
-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",
-			     CODE_LABEL_NUMBER (xop[2]));
-  return \"ex\\t%2,0(%3)\";
+  switch (which_alternative)
+    {
+      case 0:
+	return \"mvc\\t%O0(%b2+1,%R0),%1\";
+
+      case 1:
+	output_asm_insn (\"bras\\t%3,.+10\", operands);
+	output_asm_insn (\"mvc\\t%O0(1,%R0),%1\", operands);
+	return \"ex\\t%2,0(%3)\";
+
+      default:
+        abort ();
+    }
+}"
+  [(set_attr "op_type" "SS,NN")
+   (set_attr "atype"   "mem,mem")
+   (set_attr "length"  "*,14")])
+
+; Move a block that is a multiple of 256 bytes in length
+
+(define_insn "movstrdi_long"
+  [(set (match_operand:DI 4 "register_operand" "=d")
+        (const_int 0))
+   (set (match_operand:DI 0 "register_operand" "=a")
+        (plus:DI (unspec:DI [(match_operand:DI 2 "register_operand" "0")] 101)
+                 (ashift:DI (match_operand:DI 5 "register_operand" "4")
+                            (const_int 8))))
+   (set (match_operand:DI 1 "register_operand" "=a")
+        (plus:DI (unspec:DI [(match_operand:DI 3 "register_operand" "1")] 101)
+                 (ashift:DI (match_dup 5) (const_int 8))))
+   (set (mem:BLK (match_dup 2))
+        (mem:BLK (match_dup 3)))
+   (use (match_dup 5))]
+  "TARGET_64BIT"
+  "*
+{
+  output_asm_insn (\"mvc\\t0(256,%0),0(%1)\", operands);
+  output_asm_insn (\"la\\t%0,256(%0)\", operands);
+  output_asm_insn (\"la\\t%1,256(%1)\", operands);
+  return \"brct\\t%4,.-14\";
 }"
   [(set_attr "op_type" "NN")
    (set_attr "atype"   "mem")
-   (set_attr "length" "44")])
+   (set_attr "length"  "18")])
 
-(define_insn "movstrsix_31"
-  [(set (mem:BLK (match_operand:SI 0 "register_operand" "a"))
-        (mem:BLK (match_operand:SI 1 "register_operand" "a")))
-   (use (match_operand:SI 2 "register_operand" "a"))
-   (clobber (match_dup 0))
-   (clobber (match_dup 1))
-   (clobber (match_scratch:SI 3 "=&a"))
-   (clobber (reg:CC 33))]
-  ""
+(define_insn "movstrsi_long"
+  [(set (match_operand:SI 4 "register_operand" "=d")
+        (const_int 0))
+   (set (match_operand:SI 0 "register_operand" "=a")
+        (plus:SI (unspec:SI [(match_operand:SI 2 "register_operand" "0")] 101)
+                 (ashift:SI (match_operand:SI 5 "register_operand" "4")
+                            (const_int 8))))
+   (set (match_operand:SI 1 "register_operand" "=a")
+        (plus:SI (unspec:SI [(match_operand:SI 3 "register_operand" "1")] 101)
+                 (ashift:SI (match_dup 5) (const_int 8))))
+   (set (mem:BLK (match_dup 2))
+        (mem:BLK (match_dup 3)))
+   (use (match_dup 5))]
+  "!TARGET_64BIT"
   "*
 {
-  rtx xop[4];
-  xop[0] = gen_label_rtx ();
-  xop[1] = gen_label_rtx ();
-  xop[2] = gen_label_rtx ();
-  xop[3] = operands[3];
-  output_asm_insn (\"lr\\t%3,%2\",operands);
-  output_asm_insn (\"sra\\t%3,8\",operands);
-  output_asm_insn (\"jz\\t%l1\",xop);
-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",
-			     CODE_LABEL_NUMBER (xop[0]));
-  output_asm_insn (\"mvc\\t0(256,%0),0(%1)\",operands);
-  output_asm_insn (\"la\\t%0,256(%0)\",operands);
-  output_asm_insn (\"la\\t%1,256(%1)\",operands);
-  xop[3] = operands[3];
-  output_asm_insn (\"brct\\t%3,%l0\",xop);
-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",
-			     CODE_LABEL_NUMBER (xop[1]));
-  xop[3] = operands[3];
-  output_asm_insn (\"bras\\t%3,%l2\",xop);
-  output_asm_insn (\"mvc\\t0(1,%0),0(%1)\",operands);
-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",
-			     CODE_LABEL_NUMBER (xop[2]));
-  return \"ex\\t%2,0(%3)\";
+  output_asm_insn (\"mvc\\t0(256,%0),0(%1)\", operands);
+  output_asm_insn (\"la\\t%0,256(%0)\", operands);
+  output_asm_insn (\"la\\t%1,256(%1)\", operands);
+  return \"brct\\t%4,.-14\";
 }"
-   [(set_attr "op_type" "NN")
-    (set_attr "length" "42")
-    (set_attr "atype" "mem")])
+  [(set_attr "op_type" "NN")
+   (set_attr "atype"   "mem")
+   (set_attr "length"  "18")])
 
 ; Move a block that is larger than 255 bytes in length.
 
 (define_insn "movstrdi_64"
-  [(set (mem:BLK (subreg:DI (match_operand:TI 0 "register_operand" "d") 0))
-        (mem:BLK (subreg:DI (match_operand:TI 1 "register_operand" "d") 0)))
-   (clobber (match_dup 0))
-   (clobber (match_dup 1))
+  [(set (match_operand:TI 0 "register_operand" "=d")
+        (ashift:TI (plus:TI (match_operand:TI 2 "register_operand" "0")
+                            (lshiftrt:TI (match_dup 2) (const_int 64)))
+                   (const_int 64)))
+   (set (match_operand:TI 1 "register_operand" "=d")
+        (ashift:TI (plus:TI (match_operand:TI 3 "register_operand" "1")
+                            (lshiftrt:TI (match_dup 3) (const_int 64)))
+                   (const_int 64)))
+   (set (mem:BLK (subreg:DI (match_dup 2) 0))
+        (mem:BLK (subreg:DI (match_dup 3) 0)))
    (clobber (reg:CC 33))]
-  ""
+  "TARGET_64BIT"
   "mvcle\\t%0,%1,0\;jo\\t.-4"
   [(set_attr "op_type" "NN")
    (set_attr "atype"   "mem")
    (set_attr "length"  "8")])
 
 (define_insn "movstrsi_31"
-  [(set (mem:BLK (subreg:SI (match_operand:DI 0 "register_operand" "d") 0))
-        (mem:BLK (subreg:SI (match_operand:DI 1 "register_operand" "d") 0)))
-   (clobber (match_dup 0))
-   (clobber (match_dup 1))
+  [(set (match_operand:DI 0 "register_operand" "=d")
+        (ashift:DI (plus:DI (match_operand:DI 2 "register_operand" "0")
+                            (lshiftrt:DI (match_dup 2) (const_int 32)))
+                   (const_int 32)))
+   (set (match_operand:DI 1 "register_operand" "=d")
+        (ashift:DI (plus:DI (match_operand:DI 3 "register_operand" "1")
+                            (lshiftrt:DI (match_dup 3) (const_int 32)))
+                   (const_int 32)))
+   (set (mem:BLK (subreg:SI (match_dup 2) 0))
+        (mem:BLK (subreg:SI (match_dup 3) 0)))
    (clobber (reg:CC 33))]
-  ""
+  "!TARGET_64BIT"
   "mvcle\\t%0,%1,0\;jo\\t.-4"
    [(set_attr "op_type" "NN")
     (set_attr "atype" "mem")
@@ -1632,13 +1676,13 @@
 
       /* Load up the address+length pairs.  */
 
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg0, 0), addr);
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg0, 1), len);
+      emit_move_insn (gen_highpart (DImode, reg0), addr);
+      emit_move_insn (gen_lowpart (DImode, reg0), len);
 
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg1, 1), const0_rtx);
+      emit_move_insn (gen_lowpart (DImode, reg1), const0_rtx);
  
       /* Clear! */
-      emit_insn (gen_clrstrsi_64 (reg0, reg1));
+      emit_insn (gen_clrstrsi_64 (reg0, reg1, reg0));
       DONE;	
      }
 }")
@@ -1675,13 +1719,13 @@
 
       /* Load up the address+length pairs.  */
 
-      emit_move_insn (gen_rtx_SUBREG (SImode, reg0, 0), addr);
-      emit_move_insn (gen_rtx_SUBREG (SImode, reg0, 1), len);
+      emit_move_insn (gen_highpart (SImode, reg0), addr);
+      emit_move_insn (gen_lowpart (SImode, reg0), len);
 
-      emit_move_insn (gen_rtx_SUBREG (SImode, reg1, 1), const0_rtx);
+      emit_move_insn (gen_lowpart (SImode, reg1), const0_rtx);
  
       /* CLear! */
-      emit_insn (gen_clrstrsi_31 (reg0, reg1));
+      emit_insn (gen_clrstrsi_31 (reg0, reg1, reg0));
       DONE;	
      }
 }")
@@ -1696,16 +1740,19 @@
   ""
   "xc\\t%O0(%1,%R0),%0"	
   [(set_attr "op_type" "RS")
+   (set_attr "cycle"   "n")
    (set_attr "atype"   "mem")])
 
 ; Clear memory with length greater 256 bytes or lenght not constant
 
 (define_insn "clrstrsi_64"
-  [(set (mem:BLK (subreg:DI (match_operand:TI 0 "register_operand" "d") 0))
+  [(set (match_operand:TI 0 "register_operand" "=d")
+        (ashift:TI (plus:TI (match_operand:TI 2 "register_operand" "0")
+                            (lshiftrt:TI (match_dup 2) (const_int 64)))
+                   (const_int 64)))
+   (set (mem:BLK (subreg:DI (match_dup 2) 0))
         (const_int 0))
    (use (match_operand:TI 1 "register_operand" "d"))
-   (clobber (match_dup 0))
-   (clobber (match_dup 1))
    (clobber (reg:CC 33))]
   "TARGET_64BIT"
   "mvcle\\t%0,%1,0\;jo\\t.-4"
@@ -1715,11 +1762,13 @@
    (set_attr "length"  "8")])
 
 (define_insn "clrstrsi_31"
-  [(set (mem:BLK (subreg:SI (match_operand:DI 0 "register_operand" "d") 0))
+  [(set (match_operand:DI 0 "register_operand" "=d")
+        (ashift:DI (plus:DI (match_operand:DI 2 "register_operand" "0")
+                            (lshiftrt:DI (match_dup 2) (const_int 32)))
+                   (const_int 32)))
+   (set (mem:BLK (subreg:SI (match_dup 2) 0))
         (const_int 0))
    (use (match_operand:DI 1 "register_operand" "d"))
-   (clobber (match_dup 0))
-   (clobber (match_dup 1))
    (clobber (reg:CC 33))]
   "!TARGET_64BIT"
   "mvcle\\t%0,%1,0\;jo\\t.-4"
@@ -1776,14 +1825,14 @@
           len = force_reg (DImode, len);
 
       /* Load up the address+length pairs.  */
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg0, 0), addr0); 
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg0, 1), len);
+      emit_move_insn (gen_highpart (DImode, reg0), addr0); 
+      emit_move_insn (gen_lowpart (DImode, reg0), len);
 
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg1, 0), addr1);
-      emit_move_insn (gen_rtx_SUBREG (DImode, reg1, 1), len);
+      emit_move_insn (gen_highpart (DImode, reg1), addr1);
+      emit_move_insn (gen_lowpart (DImode, reg1), len);
 
       /* Compare! */
-      emit_insn (gen_cmpstr_64 (reg0, reg1));
+      emit_insn (gen_cmpstr_64 (reg0, reg1, reg0, reg1));
       emit_insn (gen_cmpint_di (operands[0]));
       DONE;
     }
@@ -1847,17 +1896,17 @@
           len = force_reg (Pmode, len);
 
       /* Load up the address+length pairs.  */
-      emit_move_insn (gen_rtx_SUBREG (Pmode, reg0, 0), addr0); 
-      emit_move_insn (gen_rtx_SUBREG (Pmode, reg0, 1), len);
+      emit_move_insn (gen_highpart (Pmode, reg0), addr0); 
+      emit_move_insn (gen_lowpart (Pmode, reg0), len);
 
-      emit_move_insn (gen_rtx_SUBREG (Pmode, reg1, 0), addr1);
-      emit_move_insn (gen_rtx_SUBREG (Pmode, reg1, 1), len);
+      emit_move_insn (gen_highpart (Pmode, reg1), addr1);
+      emit_move_insn (gen_lowpart (Pmode, reg1), len);
 
       /* Compare! */
       if (TARGET_64BIT) 
-          emit_insn (gen_cmpstr_64 (reg0, reg1));
+          emit_insn (gen_cmpstr_64 (reg0, reg1, reg0, reg1));
       else
-          emit_insn (gen_cmpstr_31 (reg0, reg1));
+          emit_insn (gen_cmpstr_31 (reg0, reg1, reg0, reg1));
 
       emit_insn (gen_cmpint_si (operands[0]));
       DONE;
@@ -1867,8 +1916,8 @@
 ; Compare a block that is less than 256 bytes in length.
 
 (define_insn "cmpstr_const"
-  [(set (reg:CCU 33)
-        (compare:CCU (match_operand:BLK 0 "s_operand" "oQ")
+  [(set (reg:CCS 33)
+        (compare:CCS (match_operand:BLK 0 "s_operand" "oQ")
                      (match_operand:BLK 1 "s_operand" "oQ")))
    (use (match_operand 2 "immediate_operand" "I"))]
   "(unsigned) INTVAL (operands[2]) < 256"
@@ -1880,13 +1929,11 @@
 ; Compare a block that is larger than 255 bytes in length.
 
 (define_insn "cmpstr_64"
-  [(set (reg:CCU 33)
-        (compare:CCU (mem:BLK (subreg:DI (match_operand:TI 0 "register_operand" "d") 0))
-                     (mem:BLK (subreg:DI (match_operand:TI 1 "register_operand" "d") 0))))
-   (clobber (subreg:DI (match_dup 0) 0))
-   (clobber (subreg:DI (match_dup 0) 1))
-   (clobber (subreg:DI (match_dup 1) 0))
-   (clobber (subreg:DI (match_dup 1) 1))]
+  [(clobber (match_operand:TI 0 "register_operand" "=d"))
+   (clobber (match_operand:TI 1 "register_operand" "=d"))
+   (set (reg:CCS 33)
+        (compare:CCS (mem:BLK (subreg:DI (match_operand:TI 2 "register_operand" "0") 0))
+                     (mem:BLK (subreg:DI (match_operand:TI 3 "register_operand" "1") 0))))]
   "TARGET_64BIT"
   "clcl\\t%0,%1"
   [(set_attr "op_type" "RR")
@@ -1894,13 +1941,11 @@
    (set_attr "type"    "xset")])
 
 (define_insn "cmpstr_31"
-  [(set (reg:CCU 33)
-        (compare:CCU (mem:BLK (subreg:SI (match_operand:DI 0 "register_operand" "d") 0))
-                     (mem:BLK (subreg:SI (match_operand:DI 1 "register_operand" "d") 0))))
-   (clobber (subreg:SI (match_dup 0) 0))
-   (clobber (subreg:SI (match_dup 0) 1))
-   (clobber (subreg:SI (match_dup 1) 0))
-   (clobber (subreg:SI (match_dup 1) 1))]
+  [(clobber (match_operand:DI 0 "register_operand" "=d"))
+   (clobber (match_operand:DI 1 "register_operand" "=d"))
+   (set (reg:CCS 33)
+        (compare:CCS (mem:BLK (subreg:SI (match_operand:DI 2 "register_operand" "0") 0))
+                     (mem:BLK (subreg:SI (match_operand:DI 3 "register_operand" "1") 0))))]
   "!TARGET_64BIT"
   "clcl\\t%0,%1"
   [(set_attr "op_type" "RR")
@@ -1911,7 +1956,7 @@
 
 (define_insn "cmpint_si"
   [(set (match_operand:SI 0 "register_operand" "=d")
-        (compare:SI (reg:CCU 33) (const_int 0)))]
+        (compare:SI (reg:CCS 33) (const_int 0)))]
   ""
   "*
 {
@@ -1928,7 +1973,7 @@
 
 (define_insn "cmpint_di"
   [(set (match_operand:DI 0 "register_operand" "=d")
-        (compare:DI (reg:CCU 33) (const_int 0)))]
+        (compare:DI (reg:CCS 33) (const_int 0)))]
   "TARGET_64BIT"
   "*
 {
@@ -5132,6 +5177,7 @@
    if (flag_pic)
      target = gen_rtx_PLUS (Pmode, base, target);
    emit_jump_insn (gen_casesi_jump (target, operands[3]));
+   emit_barrier ();
 
    DONE;
 }")
